------------

create table class
(course_number int not null,
title varchar(20) not null,
credits smallint not null default 3,
price decimal(6, 2) not null,
cstart date not null,
cend date not null,
period business_time(cstart, cend),
primary key(course_number, business_time without overlaps))

insert into class (course_number, title, credits, price, cstart, cend) values (1, 'BD', 5, 300, '2017-01-01', '2017-06-01')
insert into class (course_number, title, credits, price, cstart, cend) values (2, 'BDA', 8, 800, '2017-06-01', '2017-12-01')
insert into class (course_number, title, credits, price, cstart, cend) values (3, 'C++', 6, 300, '2018-01-01', '2018-06-01')
insert into class (course_number, title, credits, price, cstart, cend) values (4, 'Meta Programming', 4, 380, '2018-03-01', '2018-06-01')

select * from class for business_time from '2017-01-01' to '2017-12-31'
select * from class for business_time as of '2017-09-01'
select * from class where course_number = 4

update class for portion of business_time from '2018-04-01' to '2018-05-01' set price = 200.00 where course_number = 4
update class for portion of business_time from '2017-08-01' to '2017-09-01' set price = 800.00 where course_number = 2

delete from class for portion of business_time from '2018-02-01' to '2018-03-01' where course_number = 3

------------

create table course_sys
(course_number int primary key not null,
title varchar(20) not null,
credits smallint not null,
price decimal(7,2) not null,
sys_start timestamp(12) generated always as row begin not null,
sys_end timestamp(12) generated always as row end not null,
trans_start timestamp(12) generated always as transaction start id implicitly hidden,
period system_time(sys_start, sys_end))

create table course_sys_history like course_sys

select * from course_sys
select * from course_sys_history

alter table course_sys add versioning use history table course_sys_history

insert into course_sys (course_number, title, credits, price) values (500, 'intro to sql', 2, 200.00)
insert into course_sys (course_number, title, credits, price) values (600, 'intro to ruby', 2, 250.00)
insert into course_sys (course_number, title, credits, price) values (650, 'advanced ruby', 3, 400.00)

select * from course_sys_history

update course_sys set price = 250.00 where course_number = 650
delete from course_sys where course_number = 600

------------

create table poliza
(poliza_id int not null,
nombre varchar(25) not null,
fecha_nacimiento date not null,
residencia varchar(50) not null,
ano_vehiculo int not null,
modelo varchar(20) not null,
marca varchar(20) not null,
precio_factura decimal(9,2) not null,
numero_motor varchar(20) not null,
numero_serie varchar(20) not null,
costo decimal(9, 2) not null,
tipo_cobertura int not null,
inicio_poliza date not null,
fin_poliza date not null,
period business_time(inicio_poliza, fin_poliza),
inicio_registro timestamp(12) generated always as row begin not null,
fin_registro timestamp(12) generated always as row end not null,
transaction_start timestamp(12) generated always as transaction start id implicitly hidden,
period system_time(inicio_registro, fin_registro))


create table poliza_history like poliza
alter table poliza add versioning use history table poliza_history


insert into poliza
(poliza_id, nombre, fecha_nacimiento, residencia, ano_vehiculo, modelo, marca, precio_factura,
numero_motor, numero_serie, costo, tipo_cobertura, inicio_poliza, fin_poliza) values
(1, 'Ferm√≠n Moreno', '1995-10-09', 'Av. Centenario', 2007, 'Pilot', 'Honda', 250000.99,
'numero-motor-123', 'numero-serie-123', 10000.50, 1, '2018-01-01', '2019-01-01')


create trigger cancelacion
after update of fin_poliza on poliza
referencing new as n
old as o
for each row begin atomic
(select costo from poliza
where poliza_id = n.poliza_id)
update poliza
set costo = costo * (months_between (n.fin_poliza, o.fin_poliza)/months_between (o.fin_poliza, o.fin_poliza))
end
